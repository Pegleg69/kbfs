// Auto-generated by avdl-compiler v1.3.9 (https://github.com/keybase/node-avdl-compiler)
//   Input file: kbgitkbfs-avdl/disk_cache_remote.avdl

package kbgitkbfs1

import (
	keybase1 "github.com/keybase/client/go/protocol/keybase1"
	"github.com/keybase/go-framed-msgpack-rpc/rpc"
	context "golang.org/x/net/context"
)

// ToDoStruct is a placeholder.
type ToDoStruct struct {
	Uid keybase1.UID `codec:"uid" json:"uid"`
}

type ToDoFunctionArg struct {
}

// DiskCacheRemote specifies how to access a disk cache remotely.
type DiskCacheRemoteInterface interface {
	// ToDoFunction is a placeholder.
	ToDoFunction(context.Context) error
}

func DiskCacheRemoteProtocol(i DiskCacheRemoteInterface) rpc.Protocol {
	return rpc.Protocol{
		Name: "kbgitkbfs.1.DiskCacheRemote",
		Methods: map[string]rpc.ServeHandlerDescription{
			"ToDoFunction": {
				MakeArg: func() interface{} {
					ret := make([]ToDoFunctionArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					err = i.ToDoFunction(ctx)
					return
				},
				MethodType: rpc.MethodCall,
			},
		},
	}
}

type DiskCacheRemoteClient struct {
	Cli rpc.GenericClient
}

// ToDoFunction is a placeholder.
func (c DiskCacheRemoteClient) ToDoFunction(ctx context.Context) (err error) {
	err = c.Cli.Call(ctx, "kbgitkbfs.1.DiskCacheRemote.ToDoFunction", []interface{}{ToDoFunctionArg{}}, nil)
	return
}
